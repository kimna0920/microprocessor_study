2023.03.08.(수) 

os - O (리눅스)
	* 리눅스는 무료임
	* 와이파이 통신을 위해 이용
os - X (펌웨어) - 수업의 목표
	* 제어가 단순함
	* FreeRTos(real time) -펌웨어에 os를 더할 수 있음

컴퓨터
	- s/w
		1) 응용s/w
	- h/w
		1)cpu
		2) 메모리
			주기억장치 - ram/rom
			보조기억장치 - usb/ssd/fdd
		3) 입력
		4) 출력

마이크로 컴퓨터
	입력장치 => 마이크로 컨트롤러 => 출력장치
	- 제어부(마이크로프로세서 + 마이크로 컨트롤러)
	- 연산부(마이크로프로세서 + 마이크로 컨트롤러)
		<=> 주기억장치
			(마이크로 컨트롤러)
	- 레지스터(마이크로프로세서 + 마이크로 컨트롤러)
		<=>보조기억장치
			(마이크로 컨트롤러)
	* c언어 - 하드웨어 친화적인 언어(포인터, 구조체, 비트연산)
	* 요즘 마이크로프로세서, 마이크로 컨트롤러 구분잘 안함

동기 - 클럭으로 통신
비동기 - 시작신호&끝신호로 통신

T - 테라 - 10^12
G - 기가 - 10^9
M - 메가 - 10^6
K - 킬로 - 10^3
m - 밀리 - 10^-3
u -  나노 - 10^-6
n - 나노 - 10^-9
p - 피코 - 10^-12

입출력레지스터
	-> 원하는 핀만 1로 표현함. 나머지는 0으로 표현함.
	* pinMode - 입출력 선언(레지스터에 8bit를 던진것)
	* 아두이노는 교육을 위해 만들어짐(사용하기 편함)

마이크로 프로세서 특징
	- 저렴함 -> 시스템 비용 감소 가능
	- 고속 -> 초당 구백만개의 명령을 실행가능
	- 작은사이즈 -> 컴퓨터 시스템의 크기 감소 가능
	- 다재다능 -> 용도가 다양함, 동일한 칩은 프로그램의 간단히 변경해 사용가능
	- 저전력 소비 -> 다른 시스템에 비해 저전력
	-  낮은 발열량 -> 진공 튜브 장치에 비해 작은 열 방출
	-  높은 신뢰성 ->  고장율이 낮음
	- 휴대성 -> 작은 사이즈 + 저전력 소비로 휴대 가능
	* 온도(열) - 프로세서에 치명적임 
		-> 애너지가 지나다니는 통로를 짧게 설계해야함

마이크로 프로세서의 종류
	- 8051
		인텔에서 만든 MCU
	- PIC
		Microchip Technology 만든 MCU
	- AVR (간단한건 요고 사용)
		8비트 마이크로컨트롤러 업계에서 가장 잘 알려져 있다.
		* 아두이노에 탑제되어 있음
	- ARM(우리가 다룰 프로세서)
		Arm Limited
	- RISC/CLSC 개념
		RISC - 명령어가 H/W방식
			* 명령어의 수 적음
			* 레지스터 많다
			* 처리속도 빠르다
			* 설계 간단하다
			* 전력소모 적다
		CISC - 명령어가 S/W방식
			* 명령어의 수 많음
			* 레지스터 적다(명령어로 조진다)
			* 처리속도 느리다
			* 설계 복잡하다
			* 전력소모 많다

임베디드 시스템
	- 내장형 시스템(제어할 수 있는 기능을 내장한 전자 시스템)
		= 반도체
	- 메모리를 포함 제어할 수 있는 시스템을 통칭

<1년 계획>
리눅스 WSL
	- 포인터, 구조체, 비트연산
STM 계열, MCU (ARM)
	- 레지스터 접근(비트연산)
	- 구조체(포인터)
	- HAL Priver: 간접접근(명령어 중요)
	- 프로젝트

2023.03.15.(수)
RAM: 휘발성 (= 대부분의 주기억장치)
ROM: 비휘발성 (= USB)

리눅스의 특징
	- 이식성과 확장성이 용이
	- 텍스트 모드 중심의 관리와 다양한 관리 환경 제공
	- 풍부한 소프트웨어 개발 호나경 제공
	- 다양한 네트워크 서비스 및 작업환경 지원
	- 뛰어난 안전성
	- 폭넓은 하드웨어 장치 지원
	- 시스템의 높은 신뢰성
	- 가격 대비 탁월한 성능(무료)

c 프로그램 생성과정
	- 전처리기: 소스 파일에 gss를 동작시키면 가장 먼저 전 처리기 cpp가 동작하고, cpp는 소스 파일의 #include와 #define 과 같은 전처리기 부분을 처리
	- 컴파일러: 전처리된 파일로부터 어셈블리어로 된 파일을 생성
	- 어셈블러: 어셈블리어로 된 파일을 기계가 직접 이해할 수 있는 기계어로 된 오브젝트파일
	- 링커:  링커목적 파일을 관련된 라이브러리와 연결하여 실행 파일 생성

gcc 실행방법
	- 컴파일 방법
		$gcc 소스파일이름(a.out 파일 생성, a.out을 실행하기 위해선 $)


2023.03.22.(수)

2차원 배열은 행단위로 주소 증가함
int (*p)[2] == 무조건 8비트 
int (*p)[2] ==> 1만큼 이동시 주소 8씩 이동함

int a[3][3];
int (*p)[3];
p=a;

a[0][0]
== (*(a+0))[0]
== *(a[0]+0)
==*(*(a+0)+0)

구조체한 사용자가 c언어의 기본 차입을 가지고 새롭게 정의할 수 있는 사용자 정의 타입

구조체5
	- 함수의 인자로 기본 자료형 변수처럼 구조체 변수도 포인처로 전달가능
	(*구조체.변수이름) == (구조체->변수이름)

구조체와 패딩
	- 메모리 정렬 필요
		-> 변수의 크기배수 번지에 배치
	- 단, 메모리 손실을 방지하기 위해 변수를 빈칸 없이 채우는 것도 가능
	* 패딩x => 느려짐

구조체와 공용체(1)

	- 공용체는 유니온 키워드를 사용하여 선언하며, 모든 멤버 변수가 하나의 메오리 공간을 공류한다면 모든 면에서 구조체와 동일
	- 모든 멤버 변수가 같은 메모리를 공유하므로, 공용체는 한번에 하나의 멤버 변수만 사용가능
	* 공간 초기화시 반드시 기억해야함!!


2023.03.29.(수)
	역참조: 포인터에서 자료형이 필요한 이유
a+2 = a[2]

char*p = "apple" (apple의 시작 주소가 담김)

구조체와 공용체
	- 
열거형
	키값과 밸류로 이뤄짐. 키 값에 따라 값이 나옴.

비트필드(기계 친화적)
	- 구조체 멤버는 각 자료형 크기만큼 공간 차지
	- 구조체 멤버를 비트 단위로 저장가능
	- 실수는 사용X
	- 자료형(unsigend)를 사용함

stdint.h
	- c언어 표준은 1990년대 후반에 개정되어 C99에서는 비트 길이를 고유하게 정의한 데이터 형식을 추가해 헤더파일을 <stdint.h>에 정의함

비트 연산
	- AND연산
	- OR연산
	- XOR연산
	- NOT연산
	- Selective Clear : 0으로 AND
	- Selective Set : 1로 OR

통신 방법(단방향, 반이중, 전이중)
	단방향 : 송신측 대답X 예) 라디오
	반이중 : 동시에는 X but 양방향 소통 예) 무전기
	전이중 : 동시에 가능, 양방향 소통 예) 전화

	직렬 통신 :
	병렬 통신 : 

	동지식 통신
		-장점 : 많은 양의 데이터를 신속히 전송하려 할 때 적합
		-단점 : 비동기 전송보다 더 복잡함, 비용이 높음.
	비동기식 통신
		-장점 : 발신가자 편할때 데이터를 전송
		-단점 : 상대적인 속도가 느림

	UART
	- 범용 비동기화 송수신기
	- 1-bit 씩 전송하고, 두 시스템의 통신 속도 일치 해야함
	- 출력되는 TxD핀은 상대 시스템의 입력핀인 RxD와 서로 연결

	I2C
	- 반 이중통시느 동기 통신
	- 직렬버스로 지속의 장치 연결에 사용
	- 직렬데이터 전송을 위한 SDA와 클럭을 전달하는 SCL두개의 핀으로 양방향통신 가능

	SPI
	- 전이중 통신, 동기 통신
	- 마스터와 슬레이브 1대1 통신가능

2023.04.05.(수)
	
	개발환경 개발도구
	에디터, 컴파일러, 디버거, 다운로더
	통합개발환경 : IDE(Integrated Development

	STM32 개발환경
	STM32Cube(xxx) : ST Microelectronics 의 개발도구
	-> 세계최고의 MCN 회사, 무료임
		- STM32CubeMX : 그래픽 소프트웨어 구성 도구, 초기화 코드 생성
		- STM32CubeProgrammer(STM32CubeProg) : 프로그램 다운로드 도구
		- STM32CubeMonitor : STM32 응용 프로그램 리얼타임 동작 모니터링 도구
		- STM32CubeIDE : 올인원 개발 플랫폼
		- STM32Cube(MCU/MPU명) : 개별 MCU 및 MPU에 알맞은 임베디드 소프트웨어 플랫폼
			- STM32Cube HAL : 라이브러리
			- STM32Cube LL : API (기계친화적)

		- STM32CubeIDE 
			STM32 MCU(MPU) 소프트웨어 개발용 C/C++ 올인원 개발 플랫폼
			Eclipse /CDT 기반으로 수많은 add on 사용
			GNU C/C++ ARM 툴체인 에디터 , 컴파일러 등 ) 사용
			GDB 디버거 내장 : CPU 코어 , pheripheral 레지스터 , 메모리 내용 , 변수 디스플 레이 등
			ST LINK(STMicroelectronics), J Link(SEGGER) debug probe 지원
			STM32 MCU(MPU) 선택 , 보드 선택 , 예제 프로젝트 선택 가능
			핀아웃 , 클록 , pheripheral, 미들웨어 선택적 구성
			초기화 코드 자동 생성
			Atollic TrueSTUDIO 및 AC6 System Workbench(SW4STM32) 작성 프로그램 Import 도 가능
			멀티 OS( 윈도우 , 리눅스 , 맥 등 ) 지원


	RCC_ARB2ENR => 0x0000:0004
	GPIOA_CRL => 
	
	
	
	







