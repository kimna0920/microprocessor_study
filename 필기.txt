2023.03.08.(수) 

os - O (리눅스)
	* 리눅스는 무료임
	* 와이파이 통신을 위해 이용
os - X (펌웨어) - 수업의 목표
	* 제어가 단순함
	* FreeRTos(real time) -펌웨어에 os를 더할 수 있음

컴퓨터
	- s/w
		1) 응용s/w
	- h/w
		1)cpu
		2) 메모리
			주기억장치 - ram/rom
			보조기억장치 - usb/ssd/fdd
		3) 입력
		4) 출력

마이크로 컴퓨터
	입력장치 => 마이크로 컨트롤러 => 출력장치
	- 제어부(마이크로프로세서 + 마이크로 컨트롤러)
	- 연산부(마이크로프로세서 + 마이크로 컨트롤러)
		<=> 주기억장치
			(마이크로 컨트롤러)
	- 레지스터(마이크로프로세서 + 마이크로 컨트롤러)
		<=>보조기억장치
			(마이크로 컨트롤러)
	* c언어 - 하드웨어 친화적인 언어(포인터, 구조체, 비트연산)
	* 요즘 마이크로프로세서, 마이크로 컨트롤러 구분잘 안함

동기 - 클럭으로 통신
비동기 - 시작신호&끝신호로 통신

T - 테라 - 10^12
G - 기가 - 10^9
M - 메가 - 10^6
K - 킬로 - 10^3
m - 밀리 - 10^-3
u -  나노 - 10^-6
n - 나노 - 10^-9
p - 피코 - 10^-12

입출력레지스터
	-> 원하는 핀만 1로 표현함. 나머지는 0으로 표현함.
	* pinMode - 입출력 선언(레지스터에 8bit를 던진것)
	* 아두이노는 교육을 위해 만들어짐(사용하기 편함)

마이크로 프로세서 특징
	- 저렴함 -> 시스템 비용 감소 가능
	- 고속 -> 초당 구백만개의 명령을 실행가능
	- 작은사이즈 -> 컴퓨터 시스템의 크기 감소 가능
	- 다재다능 -> 용도가 다양함, 동일한 칩은 프로그램의 간단히 변경해 사용가능
	- 저전력 소비 -> 다른 시스템에 비해 저전력
	-  낮은 발열량 -> 진공 튜브 장치에 비해 작은 열 방출
	-  높은 신뢰성 ->  고장율이 낮음
	- 휴대성 -> 작은 사이즈 + 저전력 소비로 휴대 가능
	* 온도(열) - 프로세서에 치명적임 
		-> 애너지가 지나다니는 통로를 짧게 설계해야함

마이크로 프로세서의 종류
	- 8051
		인텔에서 만든 MCU
	- PIC
		Microchip Technology 만든 MCU
	- AVR (간단한건 요고 사용)
		8비트 마이크로컨트롤러 업계에서 가장 잘 알려져 있다.
		* 아두이노에 탑제되어 있음
	- ARM(우리가 다룰 프로세서)
		Arm Limited
	- RISC/CLSC 개념
		RISC - 명령어가 H/W방식
			* 명령어의 수 적음
			* 레지스터 많다
			* 처리속도 빠르다
			* 설계 간단하다
			* 전력소모 적다
		CISC - 명령어가 S/W방식
			* 명령어의 수 많음
			* 레지스터 적다(명령어로 조진다)
			* 처리속도 느리다
			* 설계 복잡하다
			* 전력소모 많다

임베디드 시스템
	- 내장형 시스템(제어할 수 있는 기능을 내장한 전자 시스템)
		= 반도체
	- 메모리를 포함 제어할 수 있는 시스템을 통칭

<1년 계획>
리눅스 WSL
	- 포인터, 구조체, 비트연산
STM 계열, MCU (ARM)
	- 레지스터 접근(비트연산)
	- 구조체(포인터)
	- HAL Priver: 간접접근(명령어 중요)
	- 프로젝트

2023.03.15.(수)
RAM: 휘발성 (= 대부분의 주기억장치)
ROM: 비휘발성 (= USB)

리눅스의 특징
	- 이식성과 확장성이 용이
	- 텍스트 모드 중심의 관리와 다양한 관리 환경 제공
	- 풍부한 소프트웨어 개발 호나경 제공
	- 다양한 네트워크 서비스 및 작업환경 지원
	- 뛰어난 안전성
	- 폭넓은 하드웨어 장치 지원
	- 시스템의 높은 신뢰성
	- 가격 대비 탁월한 성능(무료)

c 프로그램 생성과정
	- 전처리기: 소스 파일에 gss를 동작시키면 가장 먼저 전 처리기 cpp가 동작하고, cpp는 소스 파일의 #include와 #define 과 같은 전처리기 부분을 처리
	- 컴파일러: 전처리된 파일로부터 어셈블리어로 된 파일을 생성
	- 어셈블러: 어셈블리어로 된 파일을 기계가 직접 이해할 수 있는 기계어로 된 오브젝트파일
	- 링커:  링커목적 파일을 관련된 라이브러리와 연결하여 실행 파일 생성

gcc 실행방법
	- 컴파일 방법
		$gcc 소스파일이름(a.out 파일 생성, a.out을 실행하기 위해선 $)

		